

# This file was autogenerated by some hot garbage in the `uniffi` crate.
# Trust me, you don't want to mess with it!

# Common helper code.
#
# Ideally this would live in a separate .py file where it can be unittested etc
# in isolation, and perhaps even published as a re-useable package.
#
# However, it's important that the details of how this helper code works (e.g. the
# way that different builtin types are passed across the FFI) exactly match what's
# expected by the rust code on the other side of the interface. In practice right
# now that means coming from the exact some version of `uniffi` that was used to
# compile the rust component. The easiest way to ensure this is to bundle the Python
# helpers directly inline like we're doing here.

from __future__ import annotations
import os
import sys
import ctypes
import enum
import struct
import contextlib
import datetime
import threading
import itertools
import traceback
import typing
import platform

# Used for default argument values
_DEFAULT = object() # type: typing.Any


class _UniffiRustBuffer(ctypes.Structure):
    _fields_ = [
        ("capacity", ctypes.c_uint64),
        ("len", ctypes.c_uint64),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    @staticmethod
    def default():
        return _UniffiRustBuffer(0, 0, None)

    @staticmethod
    def alloc(size):
        return _uniffi_rust_call(_UniffiLib.ffi_algo_models_ffi_rustbuffer_alloc, size)

    @staticmethod
    def reserve(rbuf, additional):
        return _uniffi_rust_call(_UniffiLib.ffi_algo_models_ffi_rustbuffer_reserve, rbuf, additional)

    def free(self):
        return _uniffi_rust_call(_UniffiLib.ffi_algo_models_ffi_rustbuffer_free, self)

    def __str__(self):
        return "_UniffiRustBuffer(capacity={}, len={}, data={})".format(
            self.capacity,
            self.len,
            self.data[0:self.len]
        )

    @contextlib.contextmanager
    def alloc_with_builder(*args):
        """Context-manger to allocate a buffer using a _UniffiRustBufferBuilder.

        The allocated buffer will be automatically freed if an error occurs, ensuring that
        we don't accidentally leak it.
        """
        builder = _UniffiRustBufferBuilder()
        try:
            yield builder
        except:
            builder.discard()
            raise

    @contextlib.contextmanager
    def consume_with_stream(self):
        """Context-manager to consume a buffer using a _UniffiRustBufferStream.

        The _UniffiRustBuffer will be freed once the context-manager exits, ensuring that we don't
        leak it even if an error occurs.
        """
        try:
            s = _UniffiRustBufferStream.from_rust_buffer(self)
            yield s
            if s.remaining() != 0:
                raise RuntimeError("junk data left in buffer at end of consume_with_stream")
        finally:
            self.free()

    @contextlib.contextmanager
    def read_with_stream(self):
        """Context-manager to read a buffer using a _UniffiRustBufferStream.

        This is like consume_with_stream, but doesn't free the buffer afterwards.
        It should only be used with borrowed `_UniffiRustBuffer` data.
        """
        s = _UniffiRustBufferStream.from_rust_buffer(self)
        yield s
        if s.remaining() != 0:
            raise RuntimeError("junk data left in buffer at end of read_with_stream")

class _UniffiForeignBytes(ctypes.Structure):
    _fields_ = [
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    def __str__(self):
        return "_UniffiForeignBytes(len={}, data={})".format(self.len, self.data[0:self.len])


class _UniffiRustBufferStream:
    """
    Helper for structured reading of bytes from a _UniffiRustBuffer
    """

    def __init__(self, data, len):
        self.data = data
        self.len = len
        self.offset = 0

    @classmethod
    def from_rust_buffer(cls, buf):
        return cls(buf.data, buf.len)

    def remaining(self):
        return self.len - self.offset

    def _unpack_from(self, size, format):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        value = struct.unpack(format, self.data[self.offset:self.offset+size])[0]
        self.offset += size
        return value

    def read(self, size):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        data = self.data[self.offset:self.offset+size]
        self.offset += size
        return data

    def read_i8(self):
        return self._unpack_from(1, ">b")

    def read_u8(self):
        return self._unpack_from(1, ">B")

    def read_i16(self):
        return self._unpack_from(2, ">h")

    def read_u16(self):
        return self._unpack_from(2, ">H")

    def read_i32(self):
        return self._unpack_from(4, ">i")

    def read_u32(self):
        return self._unpack_from(4, ">I")

    def read_i64(self):
        return self._unpack_from(8, ">q")

    def read_u64(self):
        return self._unpack_from(8, ">Q")

    def read_float(self):
        v = self._unpack_from(4, ">f")
        return v

    def read_double(self):
        return self._unpack_from(8, ">d")

class _UniffiRustBufferBuilder:
    """
    Helper for structured writing of bytes into a _UniffiRustBuffer.
    """

    def __init__(self):
        self.rbuf = _UniffiRustBuffer.alloc(16)
        self.rbuf.len = 0

    def finalize(self):
        rbuf = self.rbuf
        self.rbuf = None
        return rbuf

    def discard(self):
        if self.rbuf is not None:
            rbuf = self.finalize()
            rbuf.free()

    @contextlib.contextmanager
    def _reserve(self, num_bytes):
        if self.rbuf.len + num_bytes > self.rbuf.capacity:
            self.rbuf = _UniffiRustBuffer.reserve(self.rbuf, num_bytes)
        yield None
        self.rbuf.len += num_bytes

    def _pack_into(self, size, format, value):
        with self._reserve(size):
            # XXX TODO: I feel like I should be able to use `struct.pack_into` here but can't figure it out.
            for i, byte in enumerate(struct.pack(format, value)):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write(self, value):
        with self._reserve(len(value)):
            for i, byte in enumerate(value):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write_i8(self, v):
        self._pack_into(1, ">b", v)

    def write_u8(self, v):
        self._pack_into(1, ">B", v)

    def write_i16(self, v):
        self._pack_into(2, ">h", v)

    def write_u16(self, v):
        self._pack_into(2, ">H", v)

    def write_i32(self, v):
        self._pack_into(4, ">i", v)

    def write_u32(self, v):
        self._pack_into(4, ">I", v)

    def write_i64(self, v):
        self._pack_into(8, ">q", v)

    def write_u64(self, v):
        self._pack_into(8, ">Q", v)

    def write_float(self, v):
        self._pack_into(4, ">f", v)

    def write_double(self, v):
        self._pack_into(8, ">d", v)

    def write_c_size_t(self, v):
        self._pack_into(ctypes.sizeof(ctypes.c_size_t) , "@N", v)
# A handful of classes and functions to support the generated data structures.
# This would be a good candidate for isolating in its own ffi-support lib.

class InternalError(Exception):
    pass

class _UniffiRustCallStatus(ctypes.Structure):
    """
    Error runtime.
    """
    _fields_ = [
        ("code", ctypes.c_int8),
        ("error_buf", _UniffiRustBuffer),
    ]

    # These match the values from the uniffi::rustcalls module
    CALL_SUCCESS = 0
    CALL_ERROR = 1
    CALL_UNEXPECTED_ERROR = 2

    @staticmethod
    def default():
        return _UniffiRustCallStatus(code=_UniffiRustCallStatus.CALL_SUCCESS, error_buf=_UniffiRustBuffer.default())

    def __str__(self):
        if self.code == _UniffiRustCallStatus.CALL_SUCCESS:
            return "_UniffiRustCallStatus(CALL_SUCCESS)"
        elif self.code == _UniffiRustCallStatus.CALL_ERROR:
            return "_UniffiRustCallStatus(CALL_ERROR)"
        elif self.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
            return "_UniffiRustCallStatus(CALL_UNEXPECTED_ERROR)"
        else:
            return "_UniffiRustCallStatus(<invalid code>)"

def _uniffi_rust_call(fn, *args):
    # Call a rust function
    return _uniffi_rust_call_with_error(None, fn, *args)

def _uniffi_rust_call_with_error(error_ffi_converter, fn, *args):
    # Call a rust function and handle any errors
    #
    # This function is used for rust calls that return Result<> and therefore can set the CALL_ERROR status code.
    # error_ffi_converter must be set to the _UniffiConverter for the error class that corresponds to the result.
    call_status = _UniffiRustCallStatus.default()

    args_with_error = args + (ctypes.byref(call_status),)
    result = fn(*args_with_error)
    _uniffi_check_call_status(error_ffi_converter, call_status)
    return result

def _uniffi_check_call_status(error_ffi_converter, call_status):
    if call_status.code == _UniffiRustCallStatus.CALL_SUCCESS:
        pass
    elif call_status.code == _UniffiRustCallStatus.CALL_ERROR:
        if error_ffi_converter is None:
            call_status.error_buf.free()
            raise InternalError("_uniffi_rust_call_with_error: CALL_ERROR, but error_ffi_converter is None")
        else:
            raise error_ffi_converter.lift(call_status.error_buf)
    elif call_status.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
        # When the rust code sees a panic, it tries to construct a _UniffiRustBuffer
        # with the message.  But if that code panics, then it just sends back
        # an empty buffer.
        if call_status.error_buf.len > 0:
            msg = _UniffiConverterString.lift(call_status.error_buf)
        else:
            msg = "Unknown rust panic"
        raise InternalError(msg)
    else:
        raise InternalError("Invalid _UniffiRustCallStatus code: {}".format(
            call_status.code))

def _uniffi_trait_interface_call(call_status, make_call, write_return_value):
    try:
        return write_return_value(make_call())
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiConverterString.lower(repr(e))

def _uniffi_trait_interface_call_with_error(call_status, make_call, write_return_value, error_type, lower_error):
    try:
        try:
            return write_return_value(make_call())
        except error_type as e:
            call_status.code = _UniffiRustCallStatus.CALL_ERROR
            call_status.error_buf = lower_error(e)
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiConverterString.lower(repr(e))
class _UniffiHandleMap:
    """
    A map where inserting, getting and removing data is synchronized with a lock.
    """

    def __init__(self):
        # type Handle = int
        self._map = {}  # type: Dict[Handle, Any]
        self._lock = threading.Lock()
        self._counter = itertools.count()

    def insert(self, obj):
        with self._lock:
            handle = next(self._counter)
            self._map[handle] = obj
            return handle

    def get(self, handle):
        try:
            with self._lock:
                return self._map[handle]
        except KeyError:
            raise InternalError("_UniffiHandleMap.get: Invalid handle")

    def remove(self, handle):
        try:
            with self._lock:
                return self._map.pop(handle)
        except KeyError:
            raise InternalError("_UniffiHandleMap.remove: Invalid handle")

    def __len__(self):
        return len(self._map)
# Types conforming to `_UniffiConverterPrimitive` pass themselves directly over the FFI.
class _UniffiConverterPrimitive:
    @classmethod
    def lift(cls, value):
        return value

    @classmethod
    def lower(cls, value):
        return value

class _UniffiConverterPrimitiveInt(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__index__()
        except Exception:
            raise TypeError("'{}' object cannot be interpreted as an integer".format(type(value).__name__))
        if not isinstance(value, int):
            raise TypeError("__index__ returned non-int (type {})".format(type(value).__name__))
        if not cls.VALUE_MIN <= value < cls.VALUE_MAX:
            raise ValueError("{} requires {} <= value < {}".format(cls.CLASS_NAME, cls.VALUE_MIN, cls.VALUE_MAX))

class _UniffiConverterPrimitiveFloat(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__float__()
        except Exception:
            raise TypeError("must be real number, not {}".format(type(value).__name__))
        if not isinstance(value, float):
            raise TypeError("__float__ returned non-float (type {})".format(type(value).__name__))

# Helper class for wrapper types that will always go through a _UniffiRustBuffer.
# Classes should inherit from this and implement the `read` and `write` static methods.
class _UniffiConverterRustBuffer:
    @classmethod
    def lift(cls, rbuf):
        with rbuf.consume_with_stream() as stream:
            return cls.read(stream)

    @classmethod
    def lower(cls, value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            cls.write(value, builder)
            return builder.finalize()

# Contains loading, initialization code, and the FFI Function declarations.
# Define some ctypes FFI types that we use in the library

"""
Function pointer for a Rust task, which a callback function that takes a opaque pointer
"""
_UNIFFI_RUST_TASK = ctypes.CFUNCTYPE(None, ctypes.c_void_p, ctypes.c_int8)

def _uniffi_future_callback_t(return_type):
    """
    Factory function to create callback function types for async functions
    """
    return ctypes.CFUNCTYPE(None, ctypes.c_uint64, return_type, _UniffiRustCallStatus)

def _uniffi_load_indirect():
    """
    This is how we find and load the dynamic library provided by the component.
    For now we just look it up by name.
    """
    if sys.platform == "darwin":
        libname = "lib{}.dylib"
    elif sys.platform.startswith("win"):
        # As of python3.8, ctypes does not seem to search $PATH when loading DLLs.
        # We could use `os.add_dll_directory` to configure the search path, but
        # it doesn't feel right to mess with application-wide settings. Let's
        # assume that the `.dll` is next to the `.py` file and load by full path.
        libname = os.path.join(
            os.path.dirname(__file__),
            "{}.dll",
        )
    else:
        # Anything else must be an ELF platform - Linux, *BSD, Solaris/illumos
        libname = "lib{}.so"

    libname = libname.format("algo_models_ffi")
    path = os.path.join(os.path.dirname(__file__), libname)
    lib = ctypes.cdll.LoadLibrary(path)
    return lib

def _uniffi_check_contract_api_version(lib):
    # Get the bindings contract version from our ComponentInterface
    bindings_contract_version = 26
    # Get the scaffolding contract version by calling the into the dylib
    scaffolding_contract_version = lib.ffi_algo_models_ffi_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version:
        raise InternalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")

def _uniffi_check_api_checksums(lib):
    if lib.uniffi_algo_models_ffi_checksum_func_attach_signature() != 24223:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_algo_models_ffi_checksum_func_decode_asset_transfer() != 49838:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_algo_models_ffi_checksum_func_decode_payment() != 34597:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_algo_models_ffi_checksum_func_encode_asset_transfer() != 53437:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_algo_models_ffi_checksum_func_encode_payment() != 33584:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_algo_models_ffi_checksum_func_get_encoded_transaction_type() != 48003:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")

# A ctypes library to expose the extern-C FFI definitions.
# This is an implementation detail which will be called internally by the public API.

_UniffiLib = _uniffi_load_indirect()
_UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_int8,
)
_UNIFFI_FOREIGN_FUTURE_FREE = ctypes.CFUNCTYPE(None,ctypes.c_uint64,
)
_UNIFFI_CALLBACK_INTERFACE_FREE = ctypes.CFUNCTYPE(None,ctypes.c_uint64,
)
class _UniffiForeignFuture(ctypes.Structure):
    _fields_ = [
        ("handle", ctypes.c_uint64),
        ("free", _UNIFFI_FOREIGN_FUTURE_FREE),
    ]
class _UniffiForeignFutureStructU8(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint8),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U8 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU8,
)
class _UniffiForeignFutureStructI8(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int8),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I8 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI8,
)
class _UniffiForeignFutureStructU16(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint16),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U16 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU16,
)
class _UniffiForeignFutureStructI16(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int16),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I16 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI16,
)
class _UniffiForeignFutureStructU32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint32),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU32,
)
class _UniffiForeignFutureStructI32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int32),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI32,
)
class _UniffiForeignFutureStructU64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint64),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU64,
)
class _UniffiForeignFutureStructI64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int64),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI64,
)
class _UniffiForeignFutureStructF32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_float),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_F32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructF32,
)
class _UniffiForeignFutureStructF64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_double),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_F64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructF64,
)
class _UniffiForeignFutureStructPointer(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_void_p),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_POINTER = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructPointer,
)
class _UniffiForeignFutureStructRustBuffer(ctypes.Structure):
    _fields_ = [
        ("return_value", _UniffiRustBuffer),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_RUST_BUFFER = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructRustBuffer,
)
class _UniffiForeignFutureStructVoid(ctypes.Structure):
    _fields_ = [
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_VOID = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructVoid,
)
_UniffiLib.uniffi_algo_models_ffi_fn_func_attach_signature.argtypes = (
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_algo_models_ffi_fn_func_attach_signature.restype = _UniffiRustBuffer
_UniffiLib.uniffi_algo_models_ffi_fn_func_decode_asset_transfer.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_algo_models_ffi_fn_func_decode_asset_transfer.restype = _UniffiRustBuffer
_UniffiLib.uniffi_algo_models_ffi_fn_func_decode_payment.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_algo_models_ffi_fn_func_decode_payment.restype = _UniffiRustBuffer
_UniffiLib.uniffi_algo_models_ffi_fn_func_encode_asset_transfer.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_algo_models_ffi_fn_func_encode_asset_transfer.restype = _UniffiRustBuffer
_UniffiLib.uniffi_algo_models_ffi_fn_func_encode_payment.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_algo_models_ffi_fn_func_encode_payment.restype = _UniffiRustBuffer
_UniffiLib.uniffi_algo_models_ffi_fn_func_get_encoded_transaction_type.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_algo_models_ffi_fn_func_get_encoded_transaction_type.restype = _UniffiRustBuffer
_UniffiLib.ffi_algo_models_ffi_rustbuffer_alloc.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_algo_models_ffi_rustbuffer_alloc.restype = _UniffiRustBuffer
_UniffiLib.ffi_algo_models_ffi_rustbuffer_from_bytes.argtypes = (
    _UniffiForeignBytes,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_algo_models_ffi_rustbuffer_from_bytes.restype = _UniffiRustBuffer
_UniffiLib.ffi_algo_models_ffi_rustbuffer_free.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_algo_models_ffi_rustbuffer_free.restype = None
_UniffiLib.ffi_algo_models_ffi_rustbuffer_reserve.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_algo_models_ffi_rustbuffer_reserve.restype = _UniffiRustBuffer
_UniffiLib.ffi_algo_models_ffi_rust_future_poll_u8.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_algo_models_ffi_rust_future_poll_u8.restype = None
_UniffiLib.ffi_algo_models_ffi_rust_future_cancel_u8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_algo_models_ffi_rust_future_cancel_u8.restype = None
_UniffiLib.ffi_algo_models_ffi_rust_future_free_u8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_algo_models_ffi_rust_future_free_u8.restype = None
_UniffiLib.ffi_algo_models_ffi_rust_future_complete_u8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_algo_models_ffi_rust_future_complete_u8.restype = ctypes.c_uint8
_UniffiLib.ffi_algo_models_ffi_rust_future_poll_i8.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_algo_models_ffi_rust_future_poll_i8.restype = None
_UniffiLib.ffi_algo_models_ffi_rust_future_cancel_i8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_algo_models_ffi_rust_future_cancel_i8.restype = None
_UniffiLib.ffi_algo_models_ffi_rust_future_free_i8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_algo_models_ffi_rust_future_free_i8.restype = None
_UniffiLib.ffi_algo_models_ffi_rust_future_complete_i8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_algo_models_ffi_rust_future_complete_i8.restype = ctypes.c_int8
_UniffiLib.ffi_algo_models_ffi_rust_future_poll_u16.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_algo_models_ffi_rust_future_poll_u16.restype = None
_UniffiLib.ffi_algo_models_ffi_rust_future_cancel_u16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_algo_models_ffi_rust_future_cancel_u16.restype = None
_UniffiLib.ffi_algo_models_ffi_rust_future_free_u16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_algo_models_ffi_rust_future_free_u16.restype = None
_UniffiLib.ffi_algo_models_ffi_rust_future_complete_u16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_algo_models_ffi_rust_future_complete_u16.restype = ctypes.c_uint16
_UniffiLib.ffi_algo_models_ffi_rust_future_poll_i16.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_algo_models_ffi_rust_future_poll_i16.restype = None
_UniffiLib.ffi_algo_models_ffi_rust_future_cancel_i16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_algo_models_ffi_rust_future_cancel_i16.restype = None
_UniffiLib.ffi_algo_models_ffi_rust_future_free_i16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_algo_models_ffi_rust_future_free_i16.restype = None
_UniffiLib.ffi_algo_models_ffi_rust_future_complete_i16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_algo_models_ffi_rust_future_complete_i16.restype = ctypes.c_int16
_UniffiLib.ffi_algo_models_ffi_rust_future_poll_u32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_algo_models_ffi_rust_future_poll_u32.restype = None
_UniffiLib.ffi_algo_models_ffi_rust_future_cancel_u32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_algo_models_ffi_rust_future_cancel_u32.restype = None
_UniffiLib.ffi_algo_models_ffi_rust_future_free_u32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_algo_models_ffi_rust_future_free_u32.restype = None
_UniffiLib.ffi_algo_models_ffi_rust_future_complete_u32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_algo_models_ffi_rust_future_complete_u32.restype = ctypes.c_uint32
_UniffiLib.ffi_algo_models_ffi_rust_future_poll_i32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_algo_models_ffi_rust_future_poll_i32.restype = None
_UniffiLib.ffi_algo_models_ffi_rust_future_cancel_i32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_algo_models_ffi_rust_future_cancel_i32.restype = None
_UniffiLib.ffi_algo_models_ffi_rust_future_free_i32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_algo_models_ffi_rust_future_free_i32.restype = None
_UniffiLib.ffi_algo_models_ffi_rust_future_complete_i32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_algo_models_ffi_rust_future_complete_i32.restype = ctypes.c_int32
_UniffiLib.ffi_algo_models_ffi_rust_future_poll_u64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_algo_models_ffi_rust_future_poll_u64.restype = None
_UniffiLib.ffi_algo_models_ffi_rust_future_cancel_u64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_algo_models_ffi_rust_future_cancel_u64.restype = None
_UniffiLib.ffi_algo_models_ffi_rust_future_free_u64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_algo_models_ffi_rust_future_free_u64.restype = None
_UniffiLib.ffi_algo_models_ffi_rust_future_complete_u64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_algo_models_ffi_rust_future_complete_u64.restype = ctypes.c_uint64
_UniffiLib.ffi_algo_models_ffi_rust_future_poll_i64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_algo_models_ffi_rust_future_poll_i64.restype = None
_UniffiLib.ffi_algo_models_ffi_rust_future_cancel_i64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_algo_models_ffi_rust_future_cancel_i64.restype = None
_UniffiLib.ffi_algo_models_ffi_rust_future_free_i64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_algo_models_ffi_rust_future_free_i64.restype = None
_UniffiLib.ffi_algo_models_ffi_rust_future_complete_i64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_algo_models_ffi_rust_future_complete_i64.restype = ctypes.c_int64
_UniffiLib.ffi_algo_models_ffi_rust_future_poll_f32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_algo_models_ffi_rust_future_poll_f32.restype = None
_UniffiLib.ffi_algo_models_ffi_rust_future_cancel_f32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_algo_models_ffi_rust_future_cancel_f32.restype = None
_UniffiLib.ffi_algo_models_ffi_rust_future_free_f32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_algo_models_ffi_rust_future_free_f32.restype = None
_UniffiLib.ffi_algo_models_ffi_rust_future_complete_f32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_algo_models_ffi_rust_future_complete_f32.restype = ctypes.c_float
_UniffiLib.ffi_algo_models_ffi_rust_future_poll_f64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_algo_models_ffi_rust_future_poll_f64.restype = None
_UniffiLib.ffi_algo_models_ffi_rust_future_cancel_f64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_algo_models_ffi_rust_future_cancel_f64.restype = None
_UniffiLib.ffi_algo_models_ffi_rust_future_free_f64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_algo_models_ffi_rust_future_free_f64.restype = None
_UniffiLib.ffi_algo_models_ffi_rust_future_complete_f64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_algo_models_ffi_rust_future_complete_f64.restype = ctypes.c_double
_UniffiLib.ffi_algo_models_ffi_rust_future_poll_pointer.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_algo_models_ffi_rust_future_poll_pointer.restype = None
_UniffiLib.ffi_algo_models_ffi_rust_future_cancel_pointer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_algo_models_ffi_rust_future_cancel_pointer.restype = None
_UniffiLib.ffi_algo_models_ffi_rust_future_free_pointer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_algo_models_ffi_rust_future_free_pointer.restype = None
_UniffiLib.ffi_algo_models_ffi_rust_future_complete_pointer.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_algo_models_ffi_rust_future_complete_pointer.restype = ctypes.c_void_p
_UniffiLib.ffi_algo_models_ffi_rust_future_poll_rust_buffer.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_algo_models_ffi_rust_future_poll_rust_buffer.restype = None
_UniffiLib.ffi_algo_models_ffi_rust_future_cancel_rust_buffer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_algo_models_ffi_rust_future_cancel_rust_buffer.restype = None
_UniffiLib.ffi_algo_models_ffi_rust_future_free_rust_buffer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_algo_models_ffi_rust_future_free_rust_buffer.restype = None
_UniffiLib.ffi_algo_models_ffi_rust_future_complete_rust_buffer.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_algo_models_ffi_rust_future_complete_rust_buffer.restype = _UniffiRustBuffer
_UniffiLib.ffi_algo_models_ffi_rust_future_poll_void.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_algo_models_ffi_rust_future_poll_void.restype = None
_UniffiLib.ffi_algo_models_ffi_rust_future_cancel_void.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_algo_models_ffi_rust_future_cancel_void.restype = None
_UniffiLib.ffi_algo_models_ffi_rust_future_free_void.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_algo_models_ffi_rust_future_free_void.restype = None
_UniffiLib.ffi_algo_models_ffi_rust_future_complete_void.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_algo_models_ffi_rust_future_complete_void.restype = None
_UniffiLib.uniffi_algo_models_ffi_checksum_func_attach_signature.argtypes = (
)
_UniffiLib.uniffi_algo_models_ffi_checksum_func_attach_signature.restype = ctypes.c_uint16
_UniffiLib.uniffi_algo_models_ffi_checksum_func_decode_asset_transfer.argtypes = (
)
_UniffiLib.uniffi_algo_models_ffi_checksum_func_decode_asset_transfer.restype = ctypes.c_uint16
_UniffiLib.uniffi_algo_models_ffi_checksum_func_decode_payment.argtypes = (
)
_UniffiLib.uniffi_algo_models_ffi_checksum_func_decode_payment.restype = ctypes.c_uint16
_UniffiLib.uniffi_algo_models_ffi_checksum_func_encode_asset_transfer.argtypes = (
)
_UniffiLib.uniffi_algo_models_ffi_checksum_func_encode_asset_transfer.restype = ctypes.c_uint16
_UniffiLib.uniffi_algo_models_ffi_checksum_func_encode_payment.argtypes = (
)
_UniffiLib.uniffi_algo_models_ffi_checksum_func_encode_payment.restype = ctypes.c_uint16
_UniffiLib.uniffi_algo_models_ffi_checksum_func_get_encoded_transaction_type.argtypes = (
)
_UniffiLib.uniffi_algo_models_ffi_checksum_func_get_encoded_transaction_type.restype = ctypes.c_uint16
_UniffiLib.ffi_algo_models_ffi_uniffi_contract_version.argtypes = (
)
_UniffiLib.ffi_algo_models_ffi_uniffi_contract_version.restype = ctypes.c_uint32

_uniffi_check_contract_api_version(_UniffiLib)
# _uniffi_check_api_checksums(_UniffiLib)

# Public interface members begin here.


class _UniffiConverterUInt64(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u64"
    VALUE_MIN = 0
    VALUE_MAX = 2**64

    @staticmethod
    def read(buf):
        return buf.read_u64()

    @staticmethod
    def write(value, buf):
        buf.write_u64(value)

class _UniffiConverterString:
    @staticmethod
    def check_lower(value):
        if not isinstance(value, str):
            raise TypeError("argument must be str, not {}".format(type(value).__name__))
        return value

    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative string length")
        utf8_bytes = buf.read(size)
        return utf8_bytes.decode("utf-8")

    @staticmethod
    def write(value, buf):
        utf8_bytes = value.encode("utf-8")
        buf.write_i32(len(utf8_bytes))
        buf.write(utf8_bytes)

    @staticmethod
    def lift(buf):
        with buf.consume_with_stream() as stream:
            return stream.read(stream.remaining()).decode("utf-8")

    @staticmethod
    def lower(value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            builder.write(value.encode("utf-8"))
            return builder.finalize()

class _UniffiConverterBytes(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative byte string length")
        return buf.read(size)

    @staticmethod
    def check_lower(value):
        try:
            memoryview(value)
        except TypeError:
            raise TypeError("a bytes-like object is required, not {!r}".format(type(value).__name__))

    @staticmethod
    def write(value, buf):
        buf.write_i32(len(value))
        buf.write(value)


class AssetTransferTransactionFields:
    header: "TransactionHeader"
    asset_id: "int"
    amount: "int"
    receiver: "ByteBuf"
    asset_sender: "typing.Optional[ByteBuf]"
    close_remainder_to: "typing.Optional[ByteBuf]"
    def __init__(self, *, header: "TransactionHeader", asset_id: "int", amount: "int", receiver: "ByteBuf", asset_sender: "typing.Optional[ByteBuf]", close_remainder_to: "typing.Optional[ByteBuf]"):
        self.header = header
        self.asset_id = asset_id
        self.amount = amount
        self.receiver = receiver
        self.asset_sender = asset_sender
        self.close_remainder_to = close_remainder_to

    def __str__(self):
        return "AssetTransferTransactionFields(header={}, asset_id={}, amount={}, receiver={}, asset_sender={}, close_remainder_to={})".format(self.header, self.asset_id, self.amount, self.receiver, self.asset_sender, self.close_remainder_to)

    def __eq__(self, other):
        if self.header != other.header:
            return False
        if self.asset_id != other.asset_id:
            return False
        if self.amount != other.amount:
            return False
        if self.receiver != other.receiver:
            return False
        if self.asset_sender != other.asset_sender:
            return False
        if self.close_remainder_to != other.close_remainder_to:
            return False
        return True

class _UniffiConverterTypeAssetTransferTransactionFields(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return AssetTransferTransactionFields(
            header=_UniffiConverterTypeTransactionHeader.read(buf),
            asset_id=_UniffiConverterUInt64.read(buf),
            amount=_UniffiConverterUInt64.read(buf),
            receiver=_UniffiConverterTypeByteBuf.read(buf),
            asset_sender=_UniffiConverterOptionalTypeByteBuf.read(buf),
            close_remainder_to=_UniffiConverterOptionalTypeByteBuf.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterTypeTransactionHeader.check_lower(value.header)
        _UniffiConverterUInt64.check_lower(value.asset_id)
        _UniffiConverterUInt64.check_lower(value.amount)
        _UniffiConverterTypeByteBuf.check_lower(value.receiver)
        _UniffiConverterOptionalTypeByteBuf.check_lower(value.asset_sender)
        _UniffiConverterOptionalTypeByteBuf.check_lower(value.close_remainder_to)

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeTransactionHeader.write(value.header, buf)
        _UniffiConverterUInt64.write(value.asset_id, buf)
        _UniffiConverterUInt64.write(value.amount, buf)
        _UniffiConverterTypeByteBuf.write(value.receiver, buf)
        _UniffiConverterOptionalTypeByteBuf.write(value.asset_sender, buf)
        _UniffiConverterOptionalTypeByteBuf.write(value.close_remainder_to, buf)


class PayTransactionFields:
    header: "TransactionHeader"
    receiver: "ByteBuf"
    amount: "int"
    close_remainder_to: "typing.Optional[ByteBuf]"
    def __init__(self, *, header: "TransactionHeader", receiver: "ByteBuf", amount: "int", close_remainder_to: "typing.Optional[ByteBuf]"):
        self.header = header
        self.receiver = receiver
        self.amount = amount
        self.close_remainder_to = close_remainder_to

    def __str__(self):
        return "PayTransactionFields(header={}, receiver={}, amount={}, close_remainder_to={})".format(self.header, self.receiver, self.amount, self.close_remainder_to)

    def __eq__(self, other):
        if self.header != other.header:
            return False
        if self.receiver != other.receiver:
            return False
        if self.amount != other.amount:
            return False
        if self.close_remainder_to != other.close_remainder_to:
            return False
        return True

class _UniffiConverterTypePayTransactionFields(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return PayTransactionFields(
            header=_UniffiConverterTypeTransactionHeader.read(buf),
            receiver=_UniffiConverterTypeByteBuf.read(buf),
            amount=_UniffiConverterUInt64.read(buf),
            close_remainder_to=_UniffiConverterOptionalTypeByteBuf.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterTypeTransactionHeader.check_lower(value.header)
        _UniffiConverterTypeByteBuf.check_lower(value.receiver)
        _UniffiConverterUInt64.check_lower(value.amount)
        _UniffiConverterOptionalTypeByteBuf.check_lower(value.close_remainder_to)

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeTransactionHeader.write(value.header, buf)
        _UniffiConverterTypeByteBuf.write(value.receiver, buf)
        _UniffiConverterUInt64.write(value.amount, buf)
        _UniffiConverterOptionalTypeByteBuf.write(value.close_remainder_to, buf)


class TransactionHeader:
    """
    The transaction header contains the fields that can be present in any transaction.
    "Header" only indicates that these are common fields, NOT that they are the first fields in the transaction.
    """

    transaction_type: "TransactionType"
    """
    The type of transaction
    """

    sender: "ByteBuf"
    """
    The sender of the transaction
    """

    fee: "int"
    first_valid: "int"
    last_valid: "int"
    genesis_hash: "typing.Optional[ByteBuf]"
    genesis_id: "typing.Optional[str]"
    note: "typing.Optional[ByteBuf]"
    rekey_to: "typing.Optional[ByteBuf]"
    lease: "typing.Optional[ByteBuf]"
    group: "typing.Optional[ByteBuf]"
    def __init__(self, *, transaction_type: "TransactionType", sender: "ByteBuf", fee: "int", first_valid: "int", last_valid: "int", genesis_hash: "typing.Optional[ByteBuf]", genesis_id: "typing.Optional[str]", note: "typing.Optional[ByteBuf]", rekey_to: "typing.Optional[ByteBuf]", lease: "typing.Optional[ByteBuf]", group: "typing.Optional[ByteBuf]"):
        self.transaction_type = transaction_type
        self.sender = sender
        self.fee = fee
        self.first_valid = first_valid
        self.last_valid = last_valid
        self.genesis_hash = genesis_hash
        self.genesis_id = genesis_id
        self.note = note
        self.rekey_to = rekey_to
        self.lease = lease
        self.group = group

    def __str__(self):
        return "TransactionHeader(transaction_type={}, sender={}, fee={}, first_valid={}, last_valid={}, genesis_hash={}, genesis_id={}, note={}, rekey_to={}, lease={}, group={})".format(self.transaction_type, self.sender, self.fee, self.first_valid, self.last_valid, self.genesis_hash, self.genesis_id, self.note, self.rekey_to, self.lease, self.group)

    def __eq__(self, other):
        if self.transaction_type != other.transaction_type:
            return False
        if self.sender != other.sender:
            return False
        if self.fee != other.fee:
            return False
        if self.first_valid != other.first_valid:
            return False
        if self.last_valid != other.last_valid:
            return False
        if self.genesis_hash != other.genesis_hash:
            return False
        if self.genesis_id != other.genesis_id:
            return False
        if self.note != other.note:
            return False
        if self.rekey_to != other.rekey_to:
            return False
        if self.lease != other.lease:
            return False
        if self.group != other.group:
            return False
        return True

class _UniffiConverterTypeTransactionHeader(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return TransactionHeader(
            transaction_type=_UniffiConverterTypeTransactionType.read(buf),
            sender=_UniffiConverterTypeByteBuf.read(buf),
            fee=_UniffiConverterUInt64.read(buf),
            first_valid=_UniffiConverterUInt64.read(buf),
            last_valid=_UniffiConverterUInt64.read(buf),
            genesis_hash=_UniffiConverterOptionalTypeByteBuf.read(buf),
            genesis_id=_UniffiConverterOptionalString.read(buf),
            note=_UniffiConverterOptionalTypeByteBuf.read(buf),
            rekey_to=_UniffiConverterOptionalTypeByteBuf.read(buf),
            lease=_UniffiConverterOptionalTypeByteBuf.read(buf),
            group=_UniffiConverterOptionalTypeByteBuf.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterTypeTransactionType.check_lower(value.transaction_type)
        _UniffiConverterTypeByteBuf.check_lower(value.sender)
        _UniffiConverterUInt64.check_lower(value.fee)
        _UniffiConverterUInt64.check_lower(value.first_valid)
        _UniffiConverterUInt64.check_lower(value.last_valid)
        _UniffiConverterOptionalTypeByteBuf.check_lower(value.genesis_hash)
        _UniffiConverterOptionalString.check_lower(value.genesis_id)
        _UniffiConverterOptionalTypeByteBuf.check_lower(value.note)
        _UniffiConverterOptionalTypeByteBuf.check_lower(value.rekey_to)
        _UniffiConverterOptionalTypeByteBuf.check_lower(value.lease)
        _UniffiConverterOptionalTypeByteBuf.check_lower(value.group)

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeTransactionType.write(value.transaction_type, buf)
        _UniffiConverterTypeByteBuf.write(value.sender, buf)
        _UniffiConverterUInt64.write(value.fee, buf)
        _UniffiConverterUInt64.write(value.first_valid, buf)
        _UniffiConverterUInt64.write(value.last_valid, buf)
        _UniffiConverterOptionalTypeByteBuf.write(value.genesis_hash, buf)
        _UniffiConverterOptionalString.write(value.genesis_id, buf)
        _UniffiConverterOptionalTypeByteBuf.write(value.note, buf)
        _UniffiConverterOptionalTypeByteBuf.write(value.rekey_to, buf)
        _UniffiConverterOptionalTypeByteBuf.write(value.lease, buf)
        _UniffiConverterOptionalTypeByteBuf.write(value.group, buf)


# MsgPackError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class MsgPackError(Exception):
    pass

_UniffiTempMsgPackError = MsgPackError

class MsgPackError:  # type: ignore
    class EncodingError(_UniffiTempMsgPackError):
        def __init__(self, *values):
            if len(values) != 1:
                raise TypeError(f"Expected 1 arguments, found {len(values)}")
            if not isinstance(values[0], str):
                raise TypeError(f"unexpected type for tuple element 0 - expected 'str', got '{type(values[0])}'")
            super().__init__(", ".join(map(repr, values)))
            self._values = values

        def __getitem__(self, index):
            return self._values[index]

        def __repr__(self):
            return "MsgPackError.EncodingError({})".format(str(self))
    _UniffiTempMsgPackError.EncodingError = EncodingError # type: ignore
    class DecodingError(_UniffiTempMsgPackError):
        def __init__(self, *values):
            if len(values) != 1:
                raise TypeError(f"Expected 1 arguments, found {len(values)}")
            if not isinstance(values[0], str):
                raise TypeError(f"unexpected type for tuple element 0 - expected 'str', got '{type(values[0])}'")
            super().__init__(", ".join(map(repr, values)))
            self._values = values

        def __getitem__(self, index):
            return self._values[index]

        def __repr__(self):
            return "MsgPackError.DecodingError({})".format(str(self))
    _UniffiTempMsgPackError.DecodingError = DecodingError # type: ignore

MsgPackError = _UniffiTempMsgPackError # type: ignore
del _UniffiTempMsgPackError


class _UniffiConverterTypeMsgPackError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return MsgPackError.EncodingError(
                _UniffiConverterString.read(buf),
            )
        if variant == 2:
            return MsgPackError.DecodingError(
                _UniffiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if isinstance(value, MsgPackError.EncodingError):
            _UniffiConverterString.check_lower(value._values[0])
            return
        if isinstance(value, MsgPackError.DecodingError):
            _UniffiConverterString.check_lower(value._values[0])
            return

    @staticmethod
    def write(value, buf):
        if isinstance(value, MsgPackError.EncodingError):
            buf.write_i32(1)
            _UniffiConverterString.write(value._values[0], buf)
        if isinstance(value, MsgPackError.DecodingError):
            buf.write_i32(2)
            _UniffiConverterString.write(value._values[0], buf)





class TransactionType(enum.Enum):
    PAYMENT = 0
    
    ASSET_TRANSFER = 1
    
    ASSET_FREEZE = 2
    
    ASSET_CONFIG = 3
    
    KEY_REGISTRATION = 4
    
    APPLICATION_CALL = 5
    


class _UniffiConverterTypeTransactionType(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return TransactionType.PAYMENT
        if variant == 2:
            return TransactionType.ASSET_TRANSFER
        if variant == 3:
            return TransactionType.ASSET_FREEZE
        if variant == 4:
            return TransactionType.ASSET_CONFIG
        if variant == 5:
            return TransactionType.KEY_REGISTRATION
        if variant == 6:
            return TransactionType.APPLICATION_CALL
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == TransactionType.PAYMENT:
            return
        if value == TransactionType.ASSET_TRANSFER:
            return
        if value == TransactionType.ASSET_FREEZE:
            return
        if value == TransactionType.ASSET_CONFIG:
            return
        if value == TransactionType.KEY_REGISTRATION:
            return
        if value == TransactionType.APPLICATION_CALL:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == TransactionType.PAYMENT:
            buf.write_i32(1)
        if value == TransactionType.ASSET_TRANSFER:
            buf.write_i32(2)
        if value == TransactionType.ASSET_FREEZE:
            buf.write_i32(3)
        if value == TransactionType.ASSET_CONFIG:
            buf.write_i32(4)
        if value == TransactionType.KEY_REGISTRATION:
            buf.write_i32(5)
        if value == TransactionType.APPLICATION_CALL:
            buf.write_i32(6)





class _UniffiConverterOptionalString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterString.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterString.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterString.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class _UniffiConverterOptionalTypeByteBuf(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        if value is not None:
            _UniffiConverterTypeByteBuf.check_lower(value)

    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.write_u8(0)
            return

        buf.write_u8(1)
        _UniffiConverterTypeByteBuf.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.read_u8()
        if flag == 0:
            return None
        elif flag == 1:
            return _UniffiConverterTypeByteBuf.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")


class _UniffiConverterTypeByteBuf:
    @staticmethod
    def write(value, buf):
        _UniffiConverterBytes.write(value, buf)

    @staticmethod
    def read(buf):
        return _UniffiConverterBytes.read(buf)

    @staticmethod
    def lift(value):
        return _UniffiConverterBytes.lift(value)

    @staticmethod
    def check_lower(value):
        return _UniffiConverterBytes.check_lower(value)

    @staticmethod
    def lower(value):
        return _UniffiConverterBytes.lower(value)
ByteBuf = bytes

# Async support

def attach_signature(encoded_tx: "bytes",signature: "bytes") -> "bytes":
    _UniffiConverterBytes.check_lower(encoded_tx)
    
    _UniffiConverterBytes.check_lower(signature)
    
    return _UniffiConverterBytes.lift(_uniffi_rust_call_with_error(_UniffiConverterTypeMsgPackError,_UniffiLib.uniffi_algo_models_ffi_fn_func_attach_signature,
        _UniffiConverterBytes.lower(encoded_tx),
        _UniffiConverterBytes.lower(signature)))


def decode_asset_transfer(bytes: "bytes") -> "AssetTransferTransactionFields":
    _UniffiConverterBytes.check_lower(bytes)
    
    return _UniffiConverterTypeAssetTransferTransactionFields.lift(_uniffi_rust_call_with_error(_UniffiConverterTypeMsgPackError,_UniffiLib.uniffi_algo_models_ffi_fn_func_decode_asset_transfer,
        _UniffiConverterBytes.lower(bytes)))


def decode_payment(bytes: "bytes") -> "PayTransactionFields":
    _UniffiConverterBytes.check_lower(bytes)
    
    return _UniffiConverterTypePayTransactionFields.lift(_uniffi_rust_call_with_error(_UniffiConverterTypeMsgPackError,_UniffiLib.uniffi_algo_models_ffi_fn_func_decode_payment,
        _UniffiConverterBytes.lower(bytes)))


def encode_asset_transfer(tx: "AssetTransferTransactionFields") -> "bytes":
    _UniffiConverterTypeAssetTransferTransactionFields.check_lower(tx)
    
    return _UniffiConverterBytes.lift(_uniffi_rust_call_with_error(_UniffiConverterTypeMsgPackError,_UniffiLib.uniffi_algo_models_ffi_fn_func_encode_asset_transfer,
        _UniffiConverterTypeAssetTransferTransactionFields.lower(tx)))


def encode_payment(tx: "PayTransactionFields") -> "bytes":
    _UniffiConverterTypePayTransactionFields.check_lower(tx)
    
    return _UniffiConverterBytes.lift(_uniffi_rust_call_with_error(_UniffiConverterTypeMsgPackError,_UniffiLib.uniffi_algo_models_ffi_fn_func_encode_payment,
        _UniffiConverterTypePayTransactionFields.lower(tx)))


def get_encoded_transaction_type(bytes: "bytes") -> "TransactionType":
    """
    Get the transaction type from the encoded transaction.
    This is particularly useful when decoding a transaction that has a unknow type
    """

    _UniffiConverterBytes.check_lower(bytes)
    
    return _UniffiConverterTypeTransactionType.lift(_uniffi_rust_call_with_error(_UniffiConverterTypeMsgPackError,_UniffiLib.uniffi_algo_models_ffi_fn_func_get_encoded_transaction_type,
        _UniffiConverterBytes.lower(bytes)))


__all__ = [
    "InternalError",
    "MsgPackError",
    "TransactionType",
    "AssetTransferTransactionFields",
    "PayTransactionFields",
    "TransactionHeader",
    "attach_signature",
    "decode_asset_transfer",
    "decode_payment",
    "encode_asset_transfer",
    "encode_payment",
    "get_encoded_transaction_type",
]

